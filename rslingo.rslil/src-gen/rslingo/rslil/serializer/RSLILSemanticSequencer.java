/*
 * generated by Xtext
 */
package rslingo.rslil.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import rslingo.rslil.rSLIL.Actor;
import rslingo.rslil.rSLIL.Attribute;
import rslingo.rslil.rSLIL.ComposedBy;
import rslingo.rslil.rSLIL.DependsOnActor;
import rslingo.rslil.rSLIL.DependsOnGoal;
import rslingo.rslil.rSLIL.Entity;
import rslingo.rslil.rSLIL.FR;
import rslingo.rslil.rSLIL.Field;
import rslingo.rslil.rSLIL.Glossary;
import rslingo.rslil.rSLIL.GlossaryType;
import rslingo.rslil.rSLIL.Goal;
import rslingo.rslil.rSLIL.Model;
import rslingo.rslil.rSLIL.NFR;
import rslingo.rslil.rSLIL.Project;
import rslingo.rslil.rSLIL.RSLILPackage;
import rslingo.rslil.rSLIL.RefAttribute;
import rslingo.rslil.rSLIL.RefFR;
import rslingo.rslil.rSLIL.RefGlossaryType;
import rslingo.rslil.rSLIL.RefGoal;
import rslingo.rslil.rSLIL.RefSystem;
import rslingo.rslil.rSLIL.RefUC;
import rslingo.rslil.rSLIL.Reference;
import rslingo.rslil.rSLIL.Stakeholder;
import rslingo.rslil.rSLIL.Term;
import rslingo.rslil.rSLIL.TermRelation;
import rslingo.rslil.rSLIL.UseCase;
import rslingo.rslil.services.RSLILGrammarAccess;

@SuppressWarnings("all")
public class RSLILSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RSLILGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == RSLILPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case RSLILPackage.ACTOR:
				sequence_Actor(context, (Actor) semanticObject); 
				return; 
			case RSLILPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case RSLILPackage.COMPOSED_BY:
				sequence_ComposedBy(context, (ComposedBy) semanticObject); 
				return; 
			case RSLILPackage.DEPENDS_ON_ACTOR:
				sequence_DependsOnActor(context, (DependsOnActor) semanticObject); 
				return; 
			case RSLILPackage.DEPENDS_ON_GOAL:
				sequence_DependsOnGoal(context, (DependsOnGoal) semanticObject); 
				return; 
			case RSLILPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case RSLILPackage.FR:
				sequence_FR(context, (FR) semanticObject); 
				return; 
			case RSLILPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case RSLILPackage.GLOSSARY:
				sequence_Glossary(context, (Glossary) semanticObject); 
				return; 
			case RSLILPackage.GLOSSARY_TYPE:
				sequence_GlossaryType(context, (GlossaryType) semanticObject); 
				return; 
			case RSLILPackage.GOAL:
				sequence_Goal(context, (Goal) semanticObject); 
				return; 
			case RSLILPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case RSLILPackage.NFR:
				sequence_NFR(context, (NFR) semanticObject); 
				return; 
			case RSLILPackage.PROJECT:
				sequence_Project(context, (Project) semanticObject); 
				return; 
			case RSLILPackage.REF_ATTRIBUTE:
				sequence_RefAttribute(context, (RefAttribute) semanticObject); 
				return; 
			case RSLILPackage.REF_FR:
				sequence_RefFR(context, (RefFR) semanticObject); 
				return; 
			case RSLILPackage.REF_GLOSSARY_TYPE:
				sequence_RefGlossaryType(context, (RefGlossaryType) semanticObject); 
				return; 
			case RSLILPackage.REF_GOAL:
				sequence_RefGoal(context, (RefGoal) semanticObject); 
				return; 
			case RSLILPackage.REF_SYSTEM:
				sequence_RefSystem(context, (RefSystem) semanticObject); 
				return; 
			case RSLILPackage.REF_UC:
				sequence_RefUC(context, (RefUC) semanticObject); 
				return; 
			case RSLILPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case RSLILPackage.STAKEHOLDER:
				sequence_Stakeholder(context, (Stakeholder) semanticObject); 
				return; 
			case RSLILPackage.SYSTEM:
				sequence_System(context, (rslingo.rslil.rSLIL.System) semanticObject); 
				return; 
			case RSLILPackage.TERM:
				sequence_Term(context, (Term) semanticObject); 
				return; 
			case RSLILPackage.TERM_RELATION:
				sequence_TermRelation(context, (TermRelation) semanticObject); 
				return; 
			case RSLILPackage.USE_CASE:
				sequence_UseCase(context, (UseCase) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (
	 *         id=ID 
	 *         name=STRING 
	 *         (type='User' | type='ExternalSystem' | type='Timer') 
	 *         description=STRING 
	 *         stakeholder=[Stakeholder|ID]? 
	 *         dependsOn=DependsOnActor?
	 *     )
	 */
	protected void sequence_Actor(EObject context, Actor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         descrition=STRING 
	 *         (
	 *             type='Boolean' | 
	 *             type='Integer' | 
	 *             type='Decimal' | 
	 *             type='Currency' | 
	 *             type='Date' | 
	 *             type='Time' | 
	 *             type='Datetime' | 
	 *             type='Enumeration' | 
	 *             type='Text' | 
	 *             type='Regex' | 
	 *             type='Ref' | 
	 *             type='Image'
	 *         ) 
	 *         field=Field 
	 *         reference=Reference?
	 *     )
	 */
	protected void sequence_Attribute(EObject context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((type='And' | type='Or') refGoal=[Goal|ID])
	 */
	protected void sequence_ComposedBy(EObject context, ComposedBy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((type='PartOf' | type='SpecializedFrom') stakeholder=[Stakeholder|ID])
	 */
	protected void sequence_DependsOnActor(EObject context, DependsOnActor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((type='Requires' | type='Supports' | type='Obstructs' | type='Conflicts' | type='Identical') refGoal=[Goal|ID])
	 */
	protected void sequence_DependsOnGoal(EObject context, DependsOnGoal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (id=ID name=STRING description=STRING attributes+=Attribute+)
	 */
	protected void sequence_Entity(EObject context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         id=ID 
	 *         name=STRING 
	 *         description=STRING 
	 *         modalityType=STRING 
	 *         actionType=STRING 
	 *         source=[Stakeholder|ID] 
	 *         priority=STRING
	 *     )
	 */
	protected void sequence_FR(EObject context, FR semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RSLILPackage.Literals.FR__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RSLILPackage.Literals.FR__ID));
			if(transientValues.isValueTransient(semanticObject, RSLILPackage.Literals.FR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RSLILPackage.Literals.FR__NAME));
			if(transientValues.isValueTransient(semanticObject, RSLILPackage.Literals.FR__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RSLILPackage.Literals.FR__DESCRIPTION));
			if(transientValues.isValueTransient(semanticObject, RSLILPackage.Literals.FR__MODALITY_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RSLILPackage.Literals.FR__MODALITY_TYPE));
			if(transientValues.isValueTransient(semanticObject, RSLILPackage.Literals.FR__ACTION_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RSLILPackage.Literals.FR__ACTION_TYPE));
			if(transientValues.isValueTransient(semanticObject, RSLILPackage.Literals.FR__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RSLILPackage.Literals.FR__SOURCE));
			if(transientValues.isValueTransient(semanticObject, RSLILPackage.Literals.FR__PRIORITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RSLILPackage.Literals.FR__PRIORITY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getFRAccess().getIdIDTerminalRuleCall_1_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getFRAccess().getNameSTRINGTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFRAccess().getDescriptionSTRINGTerminalRuleCall_6_0(), semanticObject.getDescription());
		feeder.accept(grammarAccess.getFRAccess().getModalityTypeSTRINGTerminalRuleCall_8_0(), semanticObject.getModalityType());
		feeder.accept(grammarAccess.getFRAccess().getActionTypeSTRINGTerminalRuleCall_10_0(), semanticObject.getActionType());
		feeder.accept(grammarAccess.getFRAccess().getSourceStakeholderIDTerminalRuleCall_12_0_1(), semanticObject.getSource());
		feeder.accept(grammarAccess.getFRAccess().getPrioritySTRINGTerminalRuleCall_14_0(), semanticObject.getPriority());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (size=INT (multiplicity='0' | multiplicity='1' | multiplicity='0..1' | multiplicity='*' | multiplicity=STRING) defaultValue=STRING)
	 */
	protected void sequence_Field(EObject context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type='Stakeholder' | type='Entity' | type='Architectural' | type='Actor')
	 */
	protected void sequence_GlossaryType(EObject context, GlossaryType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         id=ID 
	 *         name=STRING 
	 *         type=RefGlossaryType 
	 *         acronym=STRING 
	 *         description=STRING 
	 *         (pos='Adjective' | pos='Adverb' | pos='Noun' | pos='Verb')? 
	 *         synset=STRING? 
	 *         termRelation+=TermRelation*
	 *     )
	 */
	protected void sequence_Glossary(EObject context, Glossary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         id=ID 
	 *         description=STRING 
	 *         stakeholder=[Stakeholder|ID] 
	 *         (priority='VeryLow' | priority='Low' | priority='Medium' | priority='High' | priority='VeryHigh') 
	 *         dependsOn+=DependsOnGoal* 
	 *         composedBy+=ComposedBy*
	 *     )
	 */
	protected void sequence_Goal(EObject context, Goal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         project=Project 
	 *         systems+=System* 
	 *         glossaries+=Glossary* 
	 *         stakeholders+=Stakeholder* 
	 *         goals+=Goal* 
	 *         entities+=Entity* 
	 *         actors+=Actor* 
	 *         useCases+=UseCase* 
	 *         frs+=FR* 
	 *         nfrs+=NFR*
	 *     )
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         id=ID 
	 *         name=STRING 
	 *         description=STRING 
	 *         type=STRING 
	 *         subType=STRING 
	 *         metric=STRING 
	 *         value=STRING 
	 *         source=[Stakeholder|ID] 
	 *         priority=STRING
	 *     )
	 */
	protected void sequence_NFR(EObject context, NFR semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RSLILPackage.Literals.NFR__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RSLILPackage.Literals.NFR__ID));
			if(transientValues.isValueTransient(semanticObject, RSLILPackage.Literals.NFR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RSLILPackage.Literals.NFR__NAME));
			if(transientValues.isValueTransient(semanticObject, RSLILPackage.Literals.NFR__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RSLILPackage.Literals.NFR__DESCRIPTION));
			if(transientValues.isValueTransient(semanticObject, RSLILPackage.Literals.NFR__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RSLILPackage.Literals.NFR__TYPE));
			if(transientValues.isValueTransient(semanticObject, RSLILPackage.Literals.NFR__SUB_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RSLILPackage.Literals.NFR__SUB_TYPE));
			if(transientValues.isValueTransient(semanticObject, RSLILPackage.Literals.NFR__METRIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RSLILPackage.Literals.NFR__METRIC));
			if(transientValues.isValueTransient(semanticObject, RSLILPackage.Literals.NFR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RSLILPackage.Literals.NFR__VALUE));
			if(transientValues.isValueTransient(semanticObject, RSLILPackage.Literals.NFR__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RSLILPackage.Literals.NFR__SOURCE));
			if(transientValues.isValueTransient(semanticObject, RSLILPackage.Literals.NFR__PRIORITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RSLILPackage.Literals.NFR__PRIORITY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getNFRAccess().getIdIDTerminalRuleCall_1_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getNFRAccess().getNameSTRINGTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getNFRAccess().getDescriptionSTRINGTerminalRuleCall_6_0(), semanticObject.getDescription());
		feeder.accept(grammarAccess.getNFRAccess().getTypeSTRINGTerminalRuleCall_8_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getNFRAccess().getSubTypeSTRINGTerminalRuleCall_10_0(), semanticObject.getSubType());
		feeder.accept(grammarAccess.getNFRAccess().getMetricSTRINGTerminalRuleCall_12_0(), semanticObject.getMetric());
		feeder.accept(grammarAccess.getNFRAccess().getValueSTRINGTerminalRuleCall_14_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getNFRAccess().getSourceStakeholderIDTerminalRuleCall_16_0_1(), semanticObject.getSource());
		feeder.accept(grammarAccess.getNFRAccess().getPrioritySTRINGTerminalRuleCall_18_0(), semanticObject.getPriority());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (id=ID name=STRING description=STRING refSystem=RefSystem?)
	 */
	protected void sequence_Project(EObject context, Project semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (refAttr=[Attribute|ID] refs+=[Attribute|ID]*)
	 */
	protected void sequence_RefAttribute(EObject context, RefAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (refFR=[FR|ID] refs+=[FR|ID]*)
	 */
	protected void sequence_RefFR(EObject context, RefFR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (refType=GlossaryType refs+=GlossaryType*)
	 */
	protected void sequence_RefGlossaryType(EObject context, RefGlossaryType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (refGoal=[Goal|ID] refs+=[Goal|ID]*)
	 */
	protected void sequence_RefGoal(EObject context, RefGoal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (refSystem=[System|ID] refs+=[System|ID]*)
	 */
	protected void sequence_RefSystem(EObject context, RefSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (refUC=[UseCase|ID] refs+=[UseCase|ID]*)
	 */
	protected void sequence_RefUC(EObject context, RefUC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (refTo=RefAttribute (multiplicity='0' | multiplicity='1' | multiplicity='0..1' | multiplicity='*' | multiplicity=STRING))
	 */
	protected void sequence_Reference(EObject context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         id=ID 
	 *         name=STRING 
	 *         (type='Group.Organization' | type='Group.BusinessUnit' | type='Group.Team' | type='Individual.Person' | type='Individual.ExternalSystem') 
	 *         (category='Business.User.Direct' | category='System.Engine') 
	 *         description=STRING? 
	 *         partOf=[Stakeholder|ID]?
	 *     )
	 */
	protected void sequence_Stakeholder(EObject context, Stakeholder semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (id=ID name=STRING description=STRING partOf=[System|ID]?)
	 */
	protected void sequence_System(EObject context, rslingo.rslil.rSLIL.System semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((type='Antonym' | type='Hypernym' | type='Synonym') term=Term)
	 */
	protected void sequence_TermRelation(EObject context, TermRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (refTerm=STRING refs+=STRING*)
	 */
	protected void sequence_Term(EObject context, Term semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         id=ID 
	 *         name=STRING 
	 *         type=STRING 
	 *         description=STRING 
	 *         priotity=STRING 
	 *         goals+=RefGoal* 
	 *         frs+=RefFR* 
	 *         actorInitiates=[Actor|ID] 
	 *         actorParticipates=[Actor|ID] 
	 *         preConditions=STRING 
	 *         postConditions=STRING 
	 *         includes+=RefUC*
	 *     )
	 */
	protected void sequence_UseCase(EObject context, UseCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
