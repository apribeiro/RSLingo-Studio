grammar rslingo.rslil.RSLIL with org.eclipse.xtext.common.Terminals

generate rSLIL "http://www.rslil.rslingo/RSLIL"

Model:
	PackageProject | PackageSystem;

PackageProject:
	// Business Level
	'Package-Project' name=QualifiedName '{'
		imports+=Import*
		project=Project
		glossaryTerms+=GlossaryTerm*
		stakeholders+=Stakeholder*
		goals+=Goal*
		// Optional Nested System Level
		packageSystems+=PackageSystem*
	'}';

PackageSystem:
	// System Level
	'Package-System' name=QualifiedName '{'
		imports+=Import*
		system=System
		entities+=Entity*
		actors+=Actor*
		useCases+=UseCase*
		frs+=FR*
		qrs+=QR*
		constraints+=Constraint*
	'}';

QualifiedName:
  	ID ('.' ID)*;

QualifiedNameWithWildcard:
  	QualifiedName '.*'?;

Import:
	'import' importedNamespace=QualifiedNameWithWildcard;

Project:
	'Project' name=ID '{'
		('Name' nameAlias=STRING)?
		'Type' type=('SystemDevelopment'|'SystemDesign'|'SystemDeployment'
			|'SystemMaintenance'|'Training'|'Research'|'Other'
		)
		'ApplicationDomain' domain=('PublicSector'|'Education'|'Health'|'Telecoms'
			|'Energy&Utilities'|'Finance&Banks'|'Other'		
		)
		(planned=PlannedSchedule)?
		(actual=ActualSchedule)?
		(organizations=Organizations)?
		('Status' status=Status)?
		'Summary' summary=STRING
		'Description' description=STRING
	'}';

PlannedSchedule:
	'PlannedSchedule {'
		'Start' start=Date
		'End' end=Date
	'}';

ActualSchedule:
	'ActualSchedule {'
		'Start' start=Date
		'End' end=Date
	'}';

Date:
	day=INT '-' month=Month '-' year=INT;

Month:
	name=('Jan'|'Feb'|'Mar'|'Apr'|'May'|'Jun'|'Jul'|'Aug'|'Sep'|'Oct'|'Nov'|'Dec');

Organizations:
	'Organizations {'
		'Customer' customer=STRING
		'Supplier' supplier=STRING
		'Partners' partners=STRING 
	'}';

Status:
	value=('Not-Plan'|'Plan'|'On-Design'|'On-Develop'|'On-Test'|'On-Deploy'|'Concluded');

System:
	'System' name=ID '{'
		('Name' nameAlias=STRING)?
		('Description' description=STRING)?
		'Project' project=[Project]
		('PartOf' partOf=[System])?
	'}';

//RefSystem:
//	refSystem=[System](',' refs+=[System])*;

GlossaryTerm:
	'GlossaryTerm' name=ID '{'
		('Name' nameAlias=STRING)?
		('Description' description=STRING)?
		'Type' type=RefTermType
		('Acronym' acronym=STRING)?
		('POS' pos=('Adjective'|'Adverb'|'Noun'|'Verb'))?
		('Synset' synset=STRING)?
		termRelation+=TermRelation*
	'}';

RefTermType:
	refType=TermType(',' refs+=TermType)*;

TermType:
	type=('Stakeholder'|'Entity'|'Architectural'|'Actor');

TermRelation:
	type=('Antonym'|'Hypernym'|'Synonym') refTerm=RefTerm;

RefTerm:
	refTerm=STRING(',' refs+=STRING)*;

Stakeholder:
	'Stakeholder' name=ID '{'
		('Name' nameAlias=STRING)?
		('Description' description=STRING)?
		'Type' type=('Group.Organization'|'Group.BusinessUnit'|'Group.Team'|'Individual.Person'|'Individual.ExternalSystem')
		'Category' category=('Business'|'Business.Customer'|'Business.Customer.Sponsor'
			|'Business.Customer.Champion'|'Business.User.Direct'|'Business.User.Indirect'
			|'Business.Advisor.DomainExpert'|'Business.Advisor.Trainer'|'Business.Advisor.RegulatorAgent'
			|'Business.System'|'Technical'|'Technical.BusinessAnalyst'|'Technical.Requirements.Engineer'
			|'Technical.Software.Architect'|'Technical.Software.Designer'|'Technical.Software.Tester'
		)
		('PartOf' partOf=[Stakeholder])?
	'}';

Goal:
	'Goal' name=ID '{'
		('Name' nameAlias=STRING)?
		('Description' description=STRING)?
		('Stakeholder' stakeholder=[Stakeholder])?
		'Priority' priority=Priority
		dependsOn+=DependsOnGoal*
		composedBy+=ComposedBy*
	'}';

Priority: value=('Must'|'Should'|'Could'|'Won\'t');

DependsOnGoal:
	type=('Requires'|'Supports'|'Obstructs'|'Conflicts'|'Identical') refGoal=RefGoal;

ComposedBy:
	'ComposedBy' type=('Logic-And'|'Logic-Or') refGoal=RefGoal;

RefGoal:
	refGoal=[Goal](',' refs+=[Goal])*;

Entity:
	'Entity' name=ID '{'
		('Name' nameAlias=STRING)?
		('Description' description=STRING)?
		('Type' type=('Principal'|'Secondary'))?
		attributes+=Attribute+
		(primaryKey=PrimaryKey)?
		foreignKeys+=ForeignKey*
		checks+=Check*
	'}';

Attribute:
	'Attribute' name=ID '{'
		('Name' nameAlias=STRING)?
		('Description' description=STRING)?
		'Type' type=('Boolean'|'Integer'|'Decimal'|'Currency'|'Date'|'Time'|'Datetime'|'Enumeration'|'Text'|'Regex'|'URL'|'Image')
		('Size' size=INT)?
		('Multiplicity' multiplicity=Multiplicity)?
		('DefaultValue' defaultValue=STRING)?
		(notNull='NotNull')?
		(unique='Unique')?
	'}';

Multiplicity:
	value=('"0"' | '"1"' | '"0..1"' | '"*"' | STRING);

PrimaryKey:
	'PrimaryKey' '(' refTo=RefAttribute ')';

ForeignKey:
	'ForeignKey' entity=[Entity] '(' refTo=RefAttribute ')' 'Multiplicity' multiplicity=Multiplicity;

RefAttribute:
	refAttr=[Attribute](',' refs+=[Attribute])*;

Check:
	'Check' name=ID checkExpression=STRING;

Actor:
	'Actor' name=ID '{'
		('Name' nameAlias=STRING)?
		('Description' description=STRING)?
		'Type' type=('User'|'ExternalSystem'|'Timer')
		('Stakeholder' stakeholder=[Stakeholder])?
		('SpecializedFrom' actor=[Actor])?
	'}';

UseCase:
	'UseCase' name=ID '{'
		('Name' nameAlias=STRING)?
		('Description' description=STRING)?
		'Type' type=('EntityManage'|'EntityBrowse'|'EntitySearch'|'EntityCreate'|'EntityDelete'|'EntitySync'|'Report') 
		('Entities' entities=RefEntity)?
		'Priority' priority=Priority
		extensionPoints+=ExtensionPoint*
		('Goals' goals+=RefGoal*)?
		('FunctionalRequirements' frs+=RefFR*)?
		'ActorInitiates' actorInitiates=[Actor]
		('ActorParticipates' actors=RefActor)?
		('Pre-Conditions' preConditions=STRING)?
		('Post-Conditions' postConditions=STRING)?
		('Include' includes+=RefUC*)?
		('Extend' extends=[UseCase] 'on' extPoint=[ExtensionPoint])?
		scenarios+=Scenario*
	'}';

RefEntity:
	refEntity=[Entity] 'as' type=EntityType (',' refs+=[Entity] 'as' refType+=EntityType)*;

EntityType:
	type=('Master'|'Detail'|'Reference');

RefFR:
	refFR=[FR](',' refs+=[FR])*;

RefActor:
	refActor=[Actor](',' refs+=[Actor])*;

RefUC:
	refUC=[UseCase](',' refs+=[UseCase])*;

ExtensionPoint:
	'ExtensionPoint' name=ID ('Description' description=STRING)?;

Scenario:
	'Scenario' name=ID '{'
		('Name' nameAlias=STRING)?
		('Description' description=STRING)?
		'Type' type=('Main'|'Alternative'|'Exception')
		'ExecutionMode' mode=('Sequential'|'Parallel')
		steps+=Step*
	'}';

Step:
	'Step' name=ID '{'
		('Name' nameAlias=STRING)?
		('Description' description=STRING)?
		'Type' type=('ActorPrepareData'|'ActorCallSystem'|'SystemExecutes'|'SystemReturnResult'|'Other')
		('Actor' actor=[Actor])?
		('Pre-Conditions' preConditions=STRING)?
		('Post-Conditions' postConditions=STRING)?
		('NextStep' next=[Step])?
	'}';

FR:
	'FunctionalRequirement' name=ID '{'
		('Name' nameAlias=STRING)?
		'Description' description=STRING
		'Type' type=('Functional'|'Behavioral'|'Data')
		('Stakeholder' stakeholder=[Stakeholder])?
		'Priority' priority=Priority
		depends+=DependsOnFR*
		('PartOf' partOf=[FR])?
	'}';

DependsOnFR:
	type=('Requires'|'Refines'|'Conflicts') refFR=RefFR;

QR:
	'QualityRequirement' name=ID '{'
		('Name' nameAlias=STRING)?
		'Description' description=STRING
		'Type' type=('Security'|'Performance'|'Usability'|'Appearance'|'Operational'|'Maintenance'|'Cultural'|'Legal')
		('Sub-Type' subType=('Security.Privacy'|'Security.Integrity'|'Usability.EaseOfUse'|'Usability.EaseOfLearn'|'Usability.Accessibility'))?
		'Metric' metric=('Hours'|'Mins'|'Secs'|'mSecs'|'Tasks'|'Other')
		'Value' value=INT
		('Stakeholder' stakeholder=[Stakeholder])?
		'Priority' priority=Priority
		depends+=DependsOnQR*
		('PartOf' partOf=[QR])?
	'}';

DependsOnQR:
	type=('Requires'|'Refines'|'Conflicts') refQR=RefQR;

RefQR:
	refQR=[QR](',' refs+=[QR])*;

Constraint:
	'Constraint' name=ID '{'
		('Name' nameAlias=STRING)?
		('Description' description=STRING)?
		'Type' type=('Cultural'|'Legal'|'Organizational'|'Physical'|'Project'|'Technological'|'Other')
		('Stakeholder' stakeholder=[Stakeholder])?
		'Priority' priority=Priority
		depends+=DependsOnConstraint*
		('PartOf' partOf=[Constraint])?
	'}';

DependsOnConstraint:
	type=('Requires'|'Refines'|'Conflicts') refConst=RefConstraint;

RefConstraint:
	refConst=[Constraint](',' refs+=[Constraint])*;
