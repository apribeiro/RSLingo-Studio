/*
 * generated by Xtext
 */
package rslingo.rslil.validation

import org.eclipse.xtext.validation.Check
import rslingo.rslil.rSLIL.EntityType
import rslingo.rslil.rSLIL.QR
import rslingo.rslil.rSLIL.RSLILPackage
import rslingo.rslil.rSLIL.Step
import rslingo.rslil.rSLIL.UseCase
import rslingo.rslil.rSLIL.Date
import java.util.Calendar

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class RSLILValidator extends AbstractRSLILValidator {

	@Check
	def checkUseCaseEntities(UseCase uc) {
		if (!uc.type.equals("Report")) {
			if (uc.entities == null) {
				error('A Use Case of type \'' + uc.type + '\' should be associated to an Entity with the role Master.', RSLILPackage.Literals.USE_CASE__ENTITIES)	
			} else {
				if (!uc.entities.type.type.equals("Master")) {
					if (uc.entities.refs.isEmpty()) {
						error('A Use Case of type \'' + uc.type + '\' should be associated to an Entity with the role Master.', RSLILPackage.Literals.USE_CASE__ENTITIES)		
					} else {
						var hasMaster = false
						
						for (EntityType type : uc.entities.refType) {
							if (type.type.equals("Master")) {
								hasMaster = true
							}
						}
						
						if (!hasMaster) {
							error('A Use Case of type \'' + uc.type + '\' should be associated to an Entity with the role Master.', RSLILPackage.Literals.USE_CASE__ENTITIES)	
						}
					}
				}
			}
		}
	}
	
	@Check
	def checkStepName(Step step) {
		if (step.name != null) {
			var parts = step.name.split("s")
			
			if (parts.size == 2 && parts.get(0).empty) {
				try {
					Integer.parseInt(parts.get(1))
				} catch (Exception e) {
					error('The Step name must be in the format \'s<integer>\'.', RSLILPackage.Literals.STEP__NAME)	
				}
			} else {
				error('The Step name must be in the format \'s<integer>\'.', RSLILPackage.Literals.STEP__NAME)
			}
		}
	}
	
	@Check
	def checkQRSubType(QR qr) {
		if (qr.subType != null) {
			if (qr.type.equals("Security")) {
				if (!qr.subType.equals("Security.Privacy")
					&& !qr.subType.equals("Security.Integrity")) {
					error('A QualityRequirement of type \'Security\' can only have the following sub-types: Security.Privacy or Security.Integrity.', RSLILPackage.Literals.QR__SUB_TYPE)	
				}	
			} else if (qr.type.equals("Usability")) {
				if (!qr.subType.equals("Usability.EaseOfUse")
					&& !qr.subType.equals("Usability.EaseOfLearn")
					&& !qr.subType.equals("Usability.Accessibility")
					&& !qr.subType.equals("Usability.Understandability")
					&& !qr.subType.equals("Usability.Learnability")
					&& !qr.subType.equals("Usability.Attractiveness")) {
					error('A QualityRequirement of type \'Usability\' can only have the following sub-types: Usability.EaseOfUse, Usability.EaseOfLearn, Usability.Accessibility, Usability.Understandability, Usability.Learnability, Usability.Attractiveness.', RSLILPackage.Literals.QR__SUB_TYPE)	
				}
			} else if (qr.type.equals("Efficiency")) {
				if (!qr.subType.equals("Efficciency.ResourceUse")) {
					error('A QualityRequirement of type \'Efficiency\' can only have the following sub-types: Efficiency.ResourceUse.', RSLILPackage.Literals.QR__SUB_TYPE)	
				}
			} else {
				// Don't allow Sub-Type when Type != of Security and Usability
				error('A QualityRequirement of type \'' + qr.type + '\' cannot have a sub-type.', RSLILPackage.Literals.QR__SUB_TYPE)		
			}
		}
	}
	
	@Check
	def checkDate(Date date) {
		if (date.day < 1 || date.day > 31) {
			error('Day should be between 1 and 31', 
					RSLILPackage.Literals.DATE__DAY)
		} else if (date.month.name.equals("Feb")) {
			if (isLeapYear(date.year) && date.day > 29) {
				error('Feb ' + date.year + ' only has 29 days', RSLILPackage.Literals.DATE__DAY)	
			} else if (!isLeapYear(date.year) && date.day > 28) {
				error('Feb ' + date.year + ' only has 28 days', RSLILPackage.Literals.DATE__DAY)
			}
		} else if (date.month.name.equals("Apr") || date.month.name.equals("Jun")
					|| date.month.name.equals("Sep") || date.month.name.equals("Nov")) {
			if (date.day > 30) {
				error(date.month.name + ' ' + date.year + ' only has 30 days', RSLILPackage.Literals.DATE__DAY)	
			}
		}
	}
	
	def boolean isLeapYear(int year) {
	  	var cal = Calendar.getInstance()
	  	cal.set(Calendar.YEAR, year)
	  	return cal.getActualMaximum(Calendar.DAY_OF_YEAR) > 365;
	}
}
