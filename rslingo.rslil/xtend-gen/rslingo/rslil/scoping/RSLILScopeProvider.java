/**
 * generated by Xtext
 */
package rslingo.rslil.scoping;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import rslingo.rslil.rSLIL.Attribute;
import rslingo.rslil.rSLIL.Entity;
import rslingo.rslil.rSLIL.ExtensionPoint;
import rslingo.rslil.rSLIL.Reference;
import rslingo.rslil.rSLIL.UseCase;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class RSLILScopeProvider extends AbstractDeclarativeScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    EClass _eContainingClass = reference.getEContainingClass();
    String _name = _eContainingClass.getName();
    String _plus = ("scope_" + _name);
    String _plus_1 = (_plus + "_");
    String _name_1 = reference.getName();
    String _plus_2 = (_plus_1 + _name_1);
    String _plus_3 = (_plus_2 + "(");
    EClass _eClass = context.eClass();
    String _name_2 = _eClass.getName();
    String _plus_4 = (_plus_3 + _name_2);
    String _plus_5 = (_plus_4 + ", ..)");
    System.out.println(_plus_5);
    return super.getScope(context, reference);
  }
  
  public IScope scope_RefAttribute_refAttr(final Reference ctx, final EReference ref) {
    Entity _entity = ctx.getEntity();
    EList<Attribute> _attributes = _entity.getAttributes();
    return Scopes.scopeFor(_attributes);
  }
  
  public IScope scope_RefAttribute_refs(final Reference ctx, final EReference ref) {
    Entity _entity = ctx.getEntity();
    EList<Attribute> _attributes = _entity.getAttributes();
    return Scopes.scopeFor(_attributes);
  }
  
  public IScope scope_UseCase_extPoint(final UseCase ctx, final EReference ref) {
    UseCase _extends = ctx.getExtends();
    EList<ExtensionPoint> _extensionnPoints = _extends.getExtensionnPoints();
    return Scopes.scopeFor(_extensionnPoints);
  }
}
