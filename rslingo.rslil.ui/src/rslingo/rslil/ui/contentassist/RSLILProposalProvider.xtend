/*
 * generated by Xtext
 */
package rslingo.rslil.ui.contentassist

import com.google.common.collect.Sets
import java.util.Set
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Alternatives
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import rslingo.rslil.rSLIL.QR
import rslingo.rslil.rSLIL.Scenario
import rslingo.rslil.rSLIL.Step
import org.eclipse.xtext.RuleCall

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class RSLILProposalProvider extends AbstractRSLILProposalProvider {
	
	final static private Set<String> SUBTYPES = Sets.newHashSet("Security.Privacy",
		"Security.Integrity", "Usability.EaseOfUse",
		"Usability.EaseOfLearn", "Usability.Accessibility")
	
	override completeKeyword(Keyword keyword, ContentAssistContext contentAssistContext,
		ICompletionProposalAcceptor acceptor) {
		if (SUBTYPES.contains(keyword.value)) {
			// Don't propose keyword
			return
		} else {
			super.completeKeyword(keyword, contentAssistContext, acceptor)	
		}
	}
	
	override complete_ID(EObject model, RuleCall ruleCall,
		ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if (!(model instanceof Scenario) && !(model instanceof Step)) {
			// Don't show the default proposal for the Step Name
			super.complete_ID(model, ruleCall, context, acceptor)	
		}
	}
	
	override completeStep_Name(EObject model, Assignment assignment,
		ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if (model instanceof Scenario) {
			var scenario = model as Scenario
			var stepName = getStepName(scenario, null)
			
			acceptor.accept(createCompletionProposal(stepName, stepName,
				getImage(model), context
			))
		} else if (model instanceof Step) {
			val step = model as Step
			var scenario = step.eContainer as Scenario
			var stepName = getStepName(scenario, step)
			
			acceptor.accept(createCompletionProposal(stepName, stepName,
				getImage(model), context
			))
		}
	}
	
	override completeQR_SubType(EObject model, Assignment assignment,
		ContentAssistContext context, ICompletionProposalAcceptor acceptor) { 
		val qrType = (model as QR).type
		
		if (qrType.equals("Security") || qrType.equals("Usability")) {
			(assignment.terminal as Alternatives).elements.forEach[e |
				var option = (e as Keyword).value 
				 
				if (option.contains(qrType)) {
					acceptor.accept(createCompletionProposal(option, option,
						getImage(model), context
					))
				}
			]	
		} else {
			super.completeQR_SubType(model, assignment, context, acceptor)
		}
	}
	
	def private String getStepName(Scenario scenario, Step step) {
		var stepName = "s"
		
		if (step != null) {
			if (scenario.steps.size > 1) {
				// Step Name must be in the format 's<integer>'
				if (!scenario.steps.last.equals(step)) {
					stepName += Integer.parseInt(scenario.steps.last.name.split("s").get(1)) + 1
				} else {
					// Get penultimate Step
					var last = scenario.steps.get(scenario.steps.size - 2)
					stepName += Integer.parseInt(last.name.split("s").get(1)) + 1
				}
			} else {
				stepName += 1
			}
		} else {
			if (scenario.steps.size > 0) {
				stepName += Integer.parseInt(scenario.steps.last.name.split("s").get(1)) + 1
			} else {
				stepName += 1
			}
		}
		return stepName
	}
}
